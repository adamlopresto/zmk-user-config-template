#include <input/processors.dtsi>
#include <dt-bindings/zmk/input_transform.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&sk {
    quick-release;
    release-after-ms = <2000>;
};

/ {
    chosen { zmk,matrix-transform = &imprint_function_row_full_bottom_row; };

    behaviors {
        shift_dance: shift_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_DANCE";
            #binding-cells = <0>;
            bindings = <&sk LSHIFT>, <&caps_layer>;

            tapping-term-ms = <1000>;
        };

        kt_off: key_toggle_off_only {
            compatible = "zmk,behavior-key-toggle";
            #binding-cells = <1>;
            display-name = "Key Toggle Off";
            toggle-mode = "off";
        };

        mo_to_blue: behavior_mo_to_blue {
            compatible = "zmk,behavior-hold-tap";
            label = "RGB blue, Hold for mo, tap for to layer";
            bindings = <&rgb_layer_mo_blue>, <&rgb_layer_to_blue>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-while-undecided;
        };

        hml: homerow_mod_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <70 71 72 78 77 76 65 73 74 75 79 80 81 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 42 43 44 45 46 47 54 55 56 57 58 59 65 66 67 68 69>;
        };

        hmr: homerow_mod_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41 48 49 50 51 52 53 60 61 62 63 64 70 71 72 73 74 76 77 78 79 80 75 81>;
        };

        tog_on: tog_on {
            compatible = "zmk,behavior-toggle-layer";
            label = "Turn on layer";
            #binding-cells = <1>;
        };

        hyper: hyper {
            compatible = "zmk,behavior-tap-dance";
            label = "HYPER";
            #binding-cells = <0>;
            bindings = <&sk K_APP>, <&mkp MB5>;

            tapping-term-ms = <1000>;
        };
    };

    macros {
        select_word_left: select_word_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(RIGHT) &kp LS(LC(LEFT)) &tog_on 2>;
            label = "SELECT_WORD_LEFT";
        };

        select_word_right: select_word_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LEFT) &kp LS(LC(RIGHT)) &tog_on 2>;
            label = "SELECT_WORD_RIGHT";
        };

        select_line_down: select_line_down {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HOME &kp HOME &kp LS(END) &tog_on 2>;
            label = "SELECT_LINE";
        };

        select_line_up: select_line_up {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp END &kp LS(HOME) &kp LS(HOME) &tog_on 2>;
            label = "SELECT_LINE_UP";
        };

        unshift_to_0: unshift_to_0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt_off LSHIFT &to 0 &rgb_ug RGB_OFF &rgb_ug RGB_COLOR_HSB(0,0,100)>;
            label = "UNSHIFT_TO_0";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        rgb_layer_to_blue: rgb_layer_to {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &to MACRO_PLACEHOLDER &rgb_ug RGB_COLOR_HSB(223,100,50) &rgb_ug RGB_ON>;
            label = "RGB_LAYER_TOG";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        new_sentence: new_sentence {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp SPACE &sk LSHIFT>;
            label = "NEW_SENTENCE";
        };

        rgb_layer_mo_blue: rgb_layer_mo {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER &rgb_ug RGB_COLOR_HSB(199,100,50) &rgb_ug RGB_ON>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&rgb_ug RGB_OFF &rgb_ug RGB_COLOR_HSB(0,0,100)>;

            label = "RGB_LAYER_MO";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        rgb_layer_to_green: rgb_layer_tog_green {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &to MACRO_PLACEHOLDER &rgb_ug RGB_COLOR_HSB(116,100,50) &rgb_ug RGB_ON>;
            label = "RGB_LAYER_TOG_GREEN";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        rgb_layer_to_yellow: rgb_layer_to_yellow {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &to MACRO_PLACEHOLDER &rgb_ug RGB_COLOR_HSB(61,85,52) &rgb_ug RGB_ON>;
            label = "RGB_LAYER_TO_YELLOW";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        hyper_kp: hyper_kp {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&sk K_APP &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "HYPER_KP";
        };

        kp_unshifted: kp_unshifted {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&kt_off LSHIFT &macro_param_1to1 &kp MACRO_PLACEHOLDER &kt LSHIFT>;
            label = "KP_UNSHIFTED";
        };

        cancel_capsword_kp: cancel_capsword_kp {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&unshift_to_0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "CANCEL_CAPSWORD_KP";
        };

        caps_layer: caps_layer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_COLOR_HSB(0,0,67) &rgb_ug RGB_ON &to 6 &kt LSHIFT>;
            label = "CAPS_LAYER";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        cancel_capsword_mkp: cancel_capsword_mp {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&unshift_to_0 &macro_param_1to1 &mkp MACRO_PLACEHOLDER>;
            label = "CANCEL_CAPSWORD_MP";
        };

        cancel_capsword_shift: cancel_capsword_shift {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&unshift_to_0 &kt LSHIFT>,
                <&macro_pause_for_release>,
                <&kt LEFT_SHIFT>;

            label = "CANCEL_CAPSWORD_SHIFT";
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_new_sentence {
            bindings = <&new_sentence>;
            key-positions = <56 57>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp GRAVE     &bt BT_SEL 0   &bt BT_SEL 1     &bt BT_SEL 2       &kp LA(F4)    &kp F5                                     &rgb_ug RGB_TOG  &kp F7           &kp F8             &kp F9       &kp F10         &kp F11
&kp EQUAL     &kp N1         &kp N2           &kp N3             &kp N4        &kp N5                                     &kp N6           &kp N7           &kp N8             &kp N9       &kp N0          &kp MINUS
&kp TAB       &kp Q          &kp W            &kp E              &kp R         &kp T                                      &kp Y            &kp U            &kp I              &kp O        &kp P           &kp BSLH
&kp ESC       &hml LGUI A    &hml LEFT_ALT S  &hml LEFT_SHIFT D  &hml LCTRL F  &kp G                                      &kp H            &hmr RCTRL J     &hmr LSHIFT K      &hmr LALT L  &hmr LGUI SEMI  &kp SQT
&shift_dance  &kp Z          &kp X            &kp C              &kp V         &kp B                                      &kp N            &kp M            &kp COMMA          &kp DOT      &kp FSLH        &shift_dance
&kp LG(LEFT)  &kp LG(RIGHT)  &kp LS(LC(TAB))  &kp LC(TAB)        &trans                                                                    &trans           &kp LBKT           &kp RBKT     &kp RALT        &rgb_layer_to_green 3
                                                                 &mkp RCLK     &rgb_layer_to_yellow 5  &hyper             &mkp LCLK        &mo_to_blue 1 1  &kp LC(BACKSPACE)
                                                                 &shift_dance  &kp RET                 &mo_to_blue 1 1    &mkp MCLK        &kp BACKSPACE    &kp SPACE
            >;
        };

        nav_editing {
            bindings = <
&to 4           &kp F1             &kp F2              &kp F3               &kp F4          &kp F5                         &kp F6         &kp F7             &kp F8           &kp F9               &kp F10   &kp F11
&kp GRAVE       &trans             &trans              &trans               &kp END         &kp LC(A)                      &kp HOME       &trans             &trans           &trans               &kp HOME  &select_line_down
&trans          &select_word_left  &kp LC(RIGHT)       &select_word_right   &trans          &kp PG_UP                      &trans         &select_line_down  &select_line_up  &trans               &trans    &trans
&trans          &hml LCMD HOME     &hml LALT LC(HOME)  &hml LSHIFT LC(END)  &hml LCTRL END  &kp PG_DN                      &kp LEFT       &hmr RCTRL DOWN    &hmr LSHIFT UP   &hmr LEFT_ALT RIGHT  &trans    &trans
&kt LEFT_SHIFT  &kp LC(Z)          &kp LC(X)           &kp LC(C)            &kp LC(V)       &kp LC(LEFT)                   &trans         &kp LC(TAB)        &kp LC(LS(TAB))  &trans               &trans    &trans
&trans          &trans             &trans              &trans               &trans                                                        &trans             &trans           &trans               &trans    &trans
                                                                            &trans          &kp DEL       &trans           &trans         &unshift_to_0      &trans
                                                                            &trans          &trans        &unshift_to_0    &unshift_to_0  &trans             &trans
            >;
        };

        nav_selecting {
            bindings = <
&trans  &trans            &trans  &trans             &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans            &trans  &trans             &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LS(LC(LEFT))  &trans  &kp LS(LC(RIGHT))  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans            &trans  &trans             &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans            &trans  &trans             &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans            &trans  &trans             &trans                            &trans  &trans  &trans  &trans  &trans
                                                     &trans  &trans  &trans    &trans  &trans  &trans
                                                     &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        Numpad_Nav_Layer {
            bindings = <
&trans  &trans    &trans    &trans     &trans      &trans                 &trans     &trans           &trans           &trans           &trans           &trans
&trans  &kp EXCL  &kp AT    &kp HASH   &kp DOLLAR  &kp PERCENT            &kp CARET  &kp AMPS         &kp STAR         &kp LPAR         &kp RPAR         &trans
&trans  &trans    &kp UP    &trans     &trans      &trans                 &trans     &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp PLUS         &trans
&trans  &kp LEFT  &kp DOWN  &kp RIGHT  &trans      &trans                 &trans     &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_NUMBER_0  &trans
&trans  &trans    &trans    &trans     &trans      &trans                 &trans     &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp DOT          &trans
&trans  &trans    &trans    &trans     &trans                                        &trans           &kp KP_NUMBER_0  &kp DOT          &trans           &unshift_to_0
                                       &trans      &trans       &trans    &trans     &trans           &trans
                                       &trans      &trans       &trans    &trans     &trans           &trans
            >;
        };

        Keyboard_Control_Layer {
            bindings = <
&trans       &trans        &trans        &trans        &trans        &trans                         &trans           &trans           &trans           &trans           &trans           &trans
&bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                   &trans           &rgb_ug RGB_TOG  &rgb_ug RGB_EFF  &trans           &trans           &trans
&sys_reset   &trans        &trans        &trans        &trans        &trans                         &rgb_ug RGB_TOG  &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_BRI  &rgb_ug RGB_SPI  &sys_reset
&bootloader  &trans        &trans        &trans        &trans        &trans                         &trans           &rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &rgb_ug RGB_BRD  &rgb_ug RGB_SPD  &bootloader
&trans       &trans        &trans        &trans        &trans        &trans                         &trans           &trans           &trans           &trans           &trans           &trans
&trans       &trans        &trans        &trans        &trans                                                        &trans           &trans           &trans           &trans           &trans
                                                       &trans        &trans        &trans           &trans           &trans           &trans
                                                       &trans        &trans        &unshift_to_0    &unshift_to_0    &trans           &trans
            >;
        };

        Mouse {
            bindings = <
&trans  &trans              &trans              &trans        &trans        &trans                   &trans         &trans  &trans  &trans  &trans  &trans
&trans  &hyper_kp NUMBER_1  &hyper_kp NUMBER_2  &hyper_kp N3  &hyper_kp N4  &trans                   &trans         &trans  &trans  &trans  &trans  &trans
&trans  &kp LC(W)           &kp LS(LC(TAB))     &kp LC(TAB)   &kp K_BACK    &kp K_FORWARD            &trans         &trans  &trans  &trans  &trans  &trans
&trans  &trans              &mkp RCLK           &mkp MCLK     &mkp LCLK     &trans                   &trans         &trans  &trans  &trans  &trans  &trans
&trans  &trans              &kp LC(X)           &kp LC(C)     &kp LC(V)     &trans                   &trans         &trans  &trans  &trans  &trans  &trans
&trans  &trans              &trans              &trans        &trans                                                &trans  &trans  &trans  &trans  &trans
                                                              &trans        &unshift_to_0  &trans    &mkp LCLK      &trans  &trans
                                                              &trans        &trans         &trans    &unshift_to_0  &trans  &trans
            >;
        };

        caps_word {
            bindings = <
&cancel_capsword_kp GRAVE     &cancel_capsword_kp F1         &cancel_capsword_kp F2           &cancel_capsword_kp F3           &cancel_capsword_kp F4     &cancel_capsword_kp F5               &cancel_capsword_kp F6     &cancel_capsword_kp F7   &cancel_capsword_kp F8       &cancel_capsword_kp F9    &cancel_capsword_kp F10   &cancel_capsword_kp F11
&cancel_capsword_kp EQUAL     &kp_unshifted N1               &kp_unshifted N2                 &kp_unshifted N3                 &kp_unshifted N4           &kp_unshifted N5                     &kp_unshifted N6           &kp_unshifted N7         &kp_unshifted N8             &kp_unshifted N9          &kp_unshifted N0          &trans
&cancel_capsword_kp TAB       &trans                         &trans                           &trans                           &trans                     &trans                               &trans                     &trans                   &trans                       &trans                    &trans                    &cancel_capsword_kp BSLH
&cancel_capsword_kp ESC       &trans                         &trans                           &trans                           &trans                     &trans                               &trans                     &trans                   &trans                       &trans                    &cancel_capsword_kp SEMI  &cancel_capsword_kp APOS
&cancel_capsword_shift        &trans                         &trans                           &trans                           &trans                     &trans                               &trans                     &trans                   &cancel_capsword_kp COMMA    &cancel_capsword_kp DOT   &cancel_capsword_kp FSLH  &cancel_capsword_shift
&cancel_capsword_kp LG(LEFT)  &cancel_capsword_kp LG(RIGHT)  &cancel_capsword_kp LS(LC(TAB))  &cancel_capsword_kp LS(LC(TAB))  &trans                                                                                     &trans                   &cancel_capsword_kp LBKT     &cancel_capsword_kp RBKT  &cancel_capsword_kp RALT  &trans
                                                                                                                               &cancel_capsword_mkp MCLK  &trans                     &trans    &cancel_capsword_mkp LCLK  &trans                   &kp_unshifted LC(BACKSPACE)
                                                                                                                               &cancel_capsword_shift     &cancel_capsword_kp ENTER  &trans    &kp_unshifted ESC          &kp_unshifted BACKSPACE  &cancel_capsword_kp SPACE
            >;
        };
    };
};

// right hand trackball configuration

&trackball_peripheral_listener {
    input-processors =
        /* //activate layer 3 within 500ms of the trackball moving,,,,,
        <&zip_temp_layer 3 500>; */,
        <&zip_xy_scaler 2 3>;
};

//left hand trackball configuration

&trackball_central_listener {
    input-processors =
        // multiply sensitivity by 1, divide by 3 (make it slower for scrolling),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
        <&zip_xy_scaler 1 16>,
        // make this trackball output scrolling events by default instead of cursor movement,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
        <&zip_xy_to_scroll_mapper>,
        // invert vertical scrolling so that the view moves in the same direction as the top of the trackball.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
        <&zip_scroll_transform INPUT_TRANSFORM_Y_INVERT>;
};

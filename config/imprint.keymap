#include <input/processors.dtsi>
#include <dt-bindings/zmk/input_transform.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&caps_word { continue-list = <UNDERSCORE BACKSPACE DELETE MINUS>; };

&sk {
    quick-release;
    release-after-ms = <2000>;
};

/ {
    chosen { zmk,matrix-transform = &imprint_function_row_full_bottom_row; };

    behaviors {
        shift_dance: shift_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_DANCE";
            #binding-cells = <0>;
            bindings = <&sk LSHIFT>, <&caps_word>;
        };

        kt_off: key_toggle_off_only {
            compatible = "zmk,behavior-key-toggle";
            #binding-cells = <1>;
            display-name = "Key Toggle Off";
            toggle-mode = "off";
        };

        mo_to_blue: behavior_mo_to_blue {
            compatible = "zmk,behavior-hold-tap";
            label = "RGB blue, Hold for mo, tap for to layer";
            bindings = <&rgb_layer_mo_blue>, <&rgb_layer_to_blue>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-while-undecided;
        };

        hml: homerow_mod_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <70 71 72 78 77 76 65 73 74 75 79 80 81 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 42 43 44 45 46 47 54 55 56 57 58 59 65 66 67 68 69>;
        };

        hmr: homerow_mod_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41 48 49 50 51 52 53 60 61 62 63 64 70 71 72 73 74 76 77 78 79 80 75 81>;
        };

        tog_on: tog_on {
            compatible = "zmk,behavior-toggle-layer";
            label = "Turn on layer";
            #binding-cells = <1>;
        };

        hyper: hyper {
            compatible = "zmk,behavior-tap-dance";
            label = "HYPER";
            #binding-cells = <0>;
            bindings = <&sk K_APP>, <&mkp MB5>;
        };
    };

    macros {
        select_word_left: select_word_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(RIGHT) &kp LS(LC(LEFT)) &tog_on 2>;
            label = "SELECT_WORD_LEFT";
        };

        select_word_right: select_word_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LEFT) &kp LS(LC(RIGHT)) &tog_on 2>;
            label = "SELECT_WORD_RIGHT";
        };

        select_line_down: select_line_down {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HOME &kp HOME &kp LS(END) &tog_on 2>;
            label = "SELECT_LINE";
        };

        select_line_up: select_line_up {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp END &kp LS(HOME) &kp LS(HOME) &tog_on 2>;
            label = "SELECT_LINE_UP";
        };

        unshift_to_0: unshift_to_0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt_off LSHIFT &to 0 &rgb_ug RGB_OFF &rgb_ug RGB_COLOR_HSB(0,0,100)>;
            label = "UNSHIFT_TO_0";
        };

        rgb_layer_to_blue: rgb_layer_to {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &to MACRO_PLACEHOLDER &rgb_ug RGB_COLOR_HSB(223,100,50) &rgb_ug RGB_ON>;
            label = "RGB_LAYER_TOG";
        };

        new_sentence: new_sentence {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp SPACE &sk LSHIFT>;
            label = "NEW_SENTENCE";
        };

        rgb_layer_mo_blue: rgb_layer_mo {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER &rgb_ug RGB_COLOR_HSB(199,100,50) &rgb_ug RGB_ON>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&rgb_ug RGB_OFF &rgb_ug RGB_COLOR_HSB(0,0,100)>;

            label = "RGB_LAYER_MO";
        };

        rgb_layer_to_green: rgb_layer_tog_green {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &to MACRO_PLACEHOLDER &rgb_ug RGB_COLOR_HSB(116,100,50) &rgb_ug RGB_ON>;
            label = "RGB_LAYER_TOG_GREEN";
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_new_sentence {
            bindings = <&new_sentence>;
            key-positions = <56 57>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp GRAVE     &bt BT_SEL 0   &bt BT_SEL 1     &bt BT_SEL 2       &kp LA(F4)    &kp F5                           &rgb_ug RGB_TOG  &kp F7           &kp F8             &kp F9       &kp F10         &kp F11
&kp EQUAL     &kp N1         &kp N2           &kp N3             &kp N4        &kp N5                           &kp N6           &kp N7           &kp N8             &kp N9       &kp N0          &kp MINUS
&kp TAB       &kp Q          &kp W            &kp E              &kp R         &kp T                            &kp Y            &kp U            &kp I              &kp O        &kp P           &kp BSLH
&sk LCTRL     &hml LGUI A    &hml LEFT_ALT S  &hml LEFT_SHIFT D  &hml LCTRL F  &kp G                            &kp H            &hmr RCTRL J     &hmr LSHIFT K      &hmr LALT L  &hmr LGUI SEMI  &kp SQT
&shift_dance  &kp Z          &kp X            &kp C              &kp V         &kp B                            &kp N            &kp M            &kp COMMA          &kp DOT      &kp FSLH        &kp RSHFT
&kp LG(LEFT)  &kp LG(RIGHT)  &kp LGUI         &sk LALT           &trans                                                          &trans           &kp LBKT           &kp RBKT     &kp RALT        &rgb_layer_to_green 3
                                                                 &mkp RCLK     &mkp MCLK        &mkp LCLK       &hyper           &mo_to_blue 1 1  &kp LC(BACKSPACE)
                                                                 &kp RET       &mo_to_blue 1 1  &shift_dance    &kp ESC          &kp BACKSPACE    &kp SPACE
            >;
        };

        nav_editing {
            bindings = <
&to 4           &kp F1             &kp F2              &kp F3               &kp F4          &kp F5                  &kp F6         &kp F7             &kp F8           &kp F9               &kp F10   &kp F11
&kp GRAVE       &trans             &trans              &trans               &kp END         &kp LC(A)               &kp HOME       &trans             &trans           &trans               &kp HOME  &select_line_down
&trans          &select_word_left  &kp LC(RIGHT)       &select_word_right   &trans          &kp PG_UP               &trans         &select_line_down  &select_line_up  &trans               &trans    &trans
&trans          &hml LCMD HOME     &hml LALT LC(HOME)  &hml LSHIFT LC(END)  &hml LCTRL END  &kp PG_DN               &kp LEFT       &hmr RCTRL DOWN    &hmr LSHIFT UP   &hmr LEFT_ALT RIGHT  &trans    &trans
&kt LEFT_SHIFT  &kp LC(Z)          &kp LC(X)           &kp LC(C)            &kp LC(V)       &kp LC(LEFT)            &trans         &kp LC(TAB)        &kp LC(LS(TAB))  &trans               &trans    &trans
&trans          &trans             &trans              &trans               &trans                                                 &trans             &trans           &trans               &trans    &trans
                                                                            &trans          &kp DEL       &trans    &trans         &trans             &trans
                                                                            &unshift_to_0   &trans        &trans    &unshift_to_0  &trans             &trans
            >;
        };

        nav_selecting {
            bindings = <
&trans  &trans            &trans  &trans             &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans            &trans  &trans             &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LS(LC(LEFT))  &trans  &kp LS(LC(RIGHT))  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans            &trans  &trans             &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans            &trans  &trans             &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans            &trans  &trans             &trans                            &trans  &trans  &trans  &trans  &trans
                                                     &trans  &trans  &trans    &trans  &trans  &trans
                                                     &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        Numpad_Nav_Layer {
            bindings = <
&trans  &trans    &trans    &trans     &trans      &trans                        &trans     &trans           &trans           &trans           &trans           &trans
&trans  &kp EXCL  &kp AT    &kp HASH   &kp DOLLAR  &kp PERCENT                   &kp CARET  &kp AMPS         &kp STAR         &kp LPAR         &kp RPAR         &trans
&trans  &trans    &kp UP    &trans     &trans      &trans                        &trans     &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp PLUS         &trans
&trans  &kp LEFT  &kp DOWN  &kp RIGHT  &trans      &trans                        &trans     &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_NUMBER_0  &trans
&trans  &trans    &trans    &trans     &trans      &trans                        &trans     &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp DOT          &trans
&trans  &trans    &trans    &trans     &trans                                               &trans           &kp KP_NUMBER_0  &kp DOT          &trans           &unshift_to_0
                                       &trans      &trans       &trans           &trans     &trans           &trans
                                       &trans      &trans       &unshift_to_0    &trans     &trans           &trans
            >;
        };

        Keyboard_Control_Layer {
            bindings = <
&trans       &trans        &trans        &trans        &trans        &trans                  &trans           &trans           &trans           &trans           &trans           &trans
&bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4            &trans           &rgb_ug RGB_TOG  &rgb_ug RGB_EFF  &trans           &trans           &trans
&sys_reset   &trans        &trans        &trans        &trans        &trans                  &rgb_ug RGB_TOG  &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_BRI  &rgb_ug RGB_SPI  &sys_reset
&bootloader  &trans        &trans        &trans        &trans        &trans                  &trans           &rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &rgb_ug RGB_BRD  &rgb_ug RGB_SPD  &bootloader
&trans       &trans        &trans        &trans        &trans        &trans                  &trans           &trans           &trans           &trans           &trans           &trans
&trans       &trans        &trans        &trans        &trans                                                 &trans           &trans           &trans           &trans           &trans
                                                       &trans        &trans        &trans    &trans           &trans           &trans
                                                       &trans        &trans        &trans    &trans           &trans           &trans
            >;
        };
    };
};

/*
// right hand trackball configuration

&trackball_peripheral_listener {
    input-processors =
        //activate layer 3 within 500ms of the trackball moving,,,,,
        <&zip_temp_layer 3 500>;
};
*/
//left hand trackball configuration

&trackball_central_listener {
    input-processors =
        // multiply sensitivity by 1, divide by 3 (make it slower for scrolling),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
        <&zip_xy_scaler 1 16>,
        // make this trackball output scrolling events by default instead of cursor movement,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
        <&zip_xy_to_scroll_mapper>,
        // invert vertical scrolling so that the view moves in the same direction as the top of the trackball.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
        <&zip_scroll_transform INPUT_TRANSFORM_Y_INVERT>;
};
